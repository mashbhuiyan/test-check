name: Deploy to EC2 using Capistrano and Git Pull

on:
  push:
    branches:
      - staging

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up SSH keys and known hosts
    - name: Set up SSH keys and known hosts
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        echo -e "Host *\n  StrictHostKeyChecking no\n  UserKnownHostsFile=/dev/null" >> ~/.ssh/config
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    # Step 3: Start SSH Agent and add the private key
    - name: Start SSH Agent and add private key
      run: |
        eval $(ssh-agent -s) # Start SSH Agent
        ssh-add ~/.ssh/id_rsa # Add the private key
    # Step 3: SSH into EC2 and create .env file
    - name: Create .env file on EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
          # Navigate to the correct deployment directory
          cd /home/ubuntu/apps/client_api_staging

          # Create the .env file with values from GitHub secrets
          echo "AIRBRAKE_PROJECT_ID=${{ secrets.AIRBRAKE_PROJECT_ID }}" > .env
          echo "AIRBRAKE_PROJECT_KEY=${{ secrets.AIRBRAKE_PROJECT_KEY }}" >> .env
          echo "AIRBRAKE_PROJECT_ENV=development" >> .env
          echo "PORT=8081" >> .env
          echo "MONGODB_URI=mongodb://127.0.0.1:27017/clientapi?authSource=admin&w=1" >> .env
        EOF
    # Step 3: SSH into EC2 and create an empty db_brands.json
    - name: Create empty db_brands.json file on EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
          # Navigate to the deployment directory
          cd /home/ubuntu/apps/client_api_staging

          # Create an empty db_brands.json file
          touch db_brands.json
        EOF
    # Step 4: Install Ruby, Bundler, and Node.js dependencies
    - name: Install Ruby, Bundler and Node.js dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ruby-full build-essential libssl-dev libreadline-dev zlib1g-dev nodejs npm ruby-bundler curl

    # Step 5: Set up gem installation directory
    - name: Set up local gem installation directory
      run: |
        echo "gem: --user-install" >> ~/.gemrc
        export PATH="$(ruby -e 'puts Gem.user_dir')/bin:$PATH"
        echo $PATH

    # Step 6: Install Bundler and Capistrano
    - name: Install Bundler and Capistrano
      run: |
        gem install bundler
        export PATH="$HOME/.gem/ruby/3.2.0/bin:$PATH"  # Ensure Bundler and Capistrano commands are found
        bundle config set --local path 'vendor/bundle'
        bundle install
        gem install capistrano -v 3.16.0

    # Step 7: Install NVM, Node.js, and PM2
    - name: Install NVM, Node.js, and PM2
      run: |
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
        nvm install 17.9.1
        npm install pm2@latest -g

    # Step 8: Install Rails
    - name: Install Rails
      run: |
        gem install rails -v 8.0.0

    # Step 9: Deploy with Capistrano
    - name: Deploy to EC2 Server using Capistrano
      run: |
        export PATH="$HOME/.gem/ruby/3.2.0/bin:$PATH"  # Ensure bundler and capistrano commands are found
        bundle exec cap staging deploy
      env:
        CAPISTRANO_SSH_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        CAPISTRANO_HOST: ${{ secrets.EC2_HOST }}
